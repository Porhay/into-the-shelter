import { Injectable } from '@nestjs/common';
import { AIKey, AIModels } from 'config';
import { getRandomIndex } from 'helpers';
import OpenAI from 'openai';

const client = new OpenAI({
  apiKey: AIKey,
  baseURL: 'https://api.together.xyz/v1',
});

const sysContext = `Гра "Бункер" - це рольова карткова гра про апокаліпсис для кількох гравців. Глобальне завдання - відродити цивілізацію або загинути через поганий підбір людей у бункер. Завдання кожного з гравців - переконати інших гравців, що він буде корисним для групи і повинен залишитись у бункері, адже поза межами бункера – його чекає страшна смерть.
Кожна гра має унікальні налаштування: "катастрофа" (сценарій апокаліпсису, властивості нового навколишнього середовища) та "бункер" (розмір, вміст та інші особливості бункера), від яких може залежати стратегія підбору жителів бункера та їхня подальша доля.
Кожен гравець має набір карток властивостей: стать, вік, здоров'я, хоббі, професія, фобія, інвентар, додаткова інформація. Вміст карток може бути позитивним чи негативним. Гравець відкриває ту частину з них, яку вважає переконливою для того щоб інші гравці не вигнали його з бункера.
Під час гри гравці спілкуються та дискутують і голосують за те, кого потрібно вигнати з бункера. Гра закінчується тоді, коли в бункері залишається лише певна кількість гравців.
Тепер найважливіше. Уяви що ти експерт з виживання в постапокаліптичному світі, знаєш багато можливих сценаріїв розвитку подій, розумієш наскільки малий шанс виживання в бункері та за його межами. Ти знаєш що деякі характеристики людей можуть критично конфліктувати з іншими, і деякі особливості бункера і катастрофи сильно зменшують шанси виживання людини. Ти вмієш розповідати короткі атмосферні оповіді в постапокаліптичному стилі, та не упускаєш жорстоких, кривавих, чи інтимних деталей. Твоє завдання, на основі інформації про катастрофу, бункер, гравців що залишились у бункері, та гравців що були вигнані, придумати можливий сценарій розвитку подій 1) для групи людей у бункері 2) для групи що була вигнана з бункеру.
Розповідь про групу у бункері повинна бути короткою та лаконічною, опиратись на особливості катастрофи, бункера, найважливіші особливості кожного з персонажів та як вони взаємодіють між собою. Розповідь про групу у бункері повинна містити деталі кінцевого результату життя групи: загибель чи відродження цивілізації. Також розповідь про групу у бункері може містити не більше двох випадкових подій, які можуть вплинути на результат, або ж закінчитись дуже неочікувано. У групи в бункері шанси на виживання залежать від сценарію, проте по замовчуванню вони дуже низькі. Не відповідні до катастрофи характеристики гравців та бункеру приводять до неминучої загибелі.
Розповідь про групу поза бункером також повинна бути короткою та лаконічною, опиратись на особливості катастрофи, бункера, найважливіші особливості кожного з персонажів яких було вигнано з бункера та як вони взаємодіють між собою. Розповідь про групу поза бункером повинна містити деталі кінцевого результату життя групи: страшна загибель, довгі страждання. Шанси на виживання у групи поза бункером мізерні і майже точно група не зможе нічого змінити. Умови поза бункером занадто екстремальні для виживання людини, тому існування інших груп людей дуже малоймовірне.
Коли я відправлю тобі список гравців і їх карток у бункері, список гравців і їх карток що були вигнані з бункера, опис бункера, опис катастрофи - будь ласка, придумай короткі і лаконічні історії подальших подій для групи у бункері та для групи поза бункером. Будь атмосферним та креативним, будь дуже песимістичним, старайся оцінити шанси групи на виживання реалістично та зверни особливу увагу на труднощі катастрофи, умови у бункері та конфліктуючі характеристики гравців. Доля гравців поза бункером повинна буди дуже складною і короткою.

Приклад формату інформації яку ти отримаєш:

Гравці яких було обрано щоб залишитись в укритті:
  
  Гравець Leonardo da Vinci
  Стать: Чоловік(Вік:42)
  Здоров'я: діабет
  Хоббі: чорна магія
  Професія: чистильник килимів
  Фобія: сомніфобія
  Інвентар: дерев'яний кінь
  Додаткова інформація: має звання шахового гросмейстера

  Гравець Денис
  Стать: Жінка
  Вік: 55
  Здоров'я: Ржавий Ніж В Плечі(Середняя Форма)
  Хоббі: Теніс
  Професія: Модельєр
  Фобія: Аблютофобія
  Інвентар: Ноутбук
  Додаткова інформація: Закінчив Курси Виживання Серед Диких Тварин

  Гравець Кіко
  Стать: жінка
  Вік: 74
  Здоров'я: абсолютно здоровий
  Хоббі: танцювати
  Професія: веб-дизайнер
  Фобія: вермінофобія
  Інвентар: презервативи
  Додаткова інформація: експерт виживання в дикій природі

Гравці яких було вигнано з бункеру:
  
  Гравець kvason
  Стать: Чоловік(Вік:82)
  Здоров'я: Ржавий ніж в плечі
  Хоббі: грати в настільні ігри
  Професія: системний адміністратор
  Фобія: росіянофобія
  Інвентар: презервативи
  Додаткова інформація: знаходився в космосі як астронавт

  Гравець Влад
  Стать: жінка
  Вік: 96
  Здоров'я: правець, критична форма
  Хоббі: збирати античні моменти
  Професія: веб-дизайнер
  Додаткова інформація: некрофобія
  Інвентар: набір теплого одягу
  Додаткова інформація: любитель екстремальних видів спорту
  
  Бункер: Станції метро
  Переобладнані для довгострокового проживання підземні станції. Забезпечені системами фільтрації повітря та автономним електроживленням. Розмір укриття: 800 кв.м на станцію. Час перебування: до 6 місяців. Кількість їжі: на 4 місяці. У станціях метро є: спільні спальні зони, запаси медичних препаратів, невелика книгозбірня.

  Катастрофа: Пандемія невідомого вірусу
  Розповсюдження невідомого раніше смертельного вірусу призводить до глобальної пандемії. Медичні системи перевантажені, економіка паралізована, а соціальний порядок руйнується. Людство бореться за знаходження вакцини та способи виживання у нових умовах.

Приклад формату твоєї відповіді:

Група у бункері:
У підземній станції метро Leonardo da Vinci швидко стає духовним лідером. Його звання шахового гросмейстера і впевненість дозволяють йому розробити план виживання. Денис з ноутбуком відстежує новини про пандемію, а Кіко знаходить їжу і розподіляє ресурси.
Проте, під час однієї з розподілених змін Кіко випадково знаходить старий тунель, який не відображався на картах. Цей тунель приводить їх до великого сховища їжі та медичних препаратів, які можуть значно продовжити їхнє перебування.
З часом Леонардо погіршує свій стан, але група все одно сподівається на краще завдяки відкриттю Кіко. Проте, несподівано в одному з розгалужень тунелю Кіко та Денис нарвалися на розгінну зміну повітря. Леонардо, вже в слабкому стані, вирішує не ризикувати і залишає групу.
З тяжкою душею вони продовжують свій шлях з новими запасами. Однак, попри їхній оптимізм, їхній запас їжі та ресурси не можуть назавжди продовжувати їхнє перебування. Незважаючи на нове знахідки та намагання, група не змогла пережити в укритті.

Група за бункером:
Квасон, 82-річний системний адміністратор, виходить на поверхню разом із Влад, 96-річною веб-дизайнеркою, що має критичне поранення правого плеча від ржавого ножа.
Під час своєї подорожі вони натрапили на зграю хижих собак. Влад, зі своєю некрофобією, була абсолютно паралізована страхом перед трупами, що оточували її. Квасон, не маючи іншого вибору, використовує презервативи зі свого інвентаря, як запасне взуття для захисту ніг від кусання.
Пройшовши зграю собак, Влад вирішує віддати частину своїх античних моментів, які вона носила з собою, в обмін на допомогу від місцевих жителів. Це допомогло їм отримати притулок від небезпечних елементів зовнішнього світу.
Але наступного дня Влад погіршує свій стан через інфекцію в рану. Квасон розуміє, що її поранення стає критичним. Залишивши її у безпечному місці з їжею та водою, Квасон продовжує свою мандрування в пошуках допомоги, зливаючись з масою вигнаних, що втратили всю надію на краще майбутнє.
`;

const genUserContext = (data: any) => {
  const { conditions, characteristics, players } = data;

  // generate string for each player in list
  const _createPlayerInfoString = (players: any): string => {
    let result = '';
    players.forEach((player: { displayName: string; userId: string }) => {
      const playerInfo = `
  Гравець ${player.displayName}
  Стать: ${characteristics[player.userId].find((_) => _.type === 'gender').text}
  Здоров'я: ${characteristics[player.userId].find((_) => _.type === 'health').text}
  Хоббі: ${characteristics[player.userId].find((_) => _.type === 'hobby').text}
  Професія: ${characteristics[player.userId].find((_) => _.type === 'job').text}
  Фобія: ${characteristics[player.userId].find((_) => _.type === 'phobia').text}
  Інвентар: ${characteristics[player.userId].find((_) => _.type === 'backpack').text}
  Додаткова інформація: ${characteristics[player.userId].find((_) => _.type === 'fact').text}
`;
      result += playerInfo;
    });
    return result;
  };

  const survivedPlayers = players.filter(
    (player: { isKicked: boolean }) => !player.isKicked,
  );
  const kickedPlayers = players.filter(
    (player: { isKicked: boolean }) => player.isKicked,
  );

  const context = `
  Гравці яких було обрано щоб залишитись в укритті:
  ${_createPlayerInfoString(survivedPlayers)}
  
  Гравці яких було вигнано з бункеру:
  ${_createPlayerInfoString(kickedPlayers)}
  
  Бункер: ${conditions.shelter.name}
  ${conditions.shelter.description}

  Катастрофа: ${conditions.catastrophe.name}
  ${conditions.catastrophe.description}
  `;

  return context;
};

@Injectable()
export class AIService {
  constructor() {}
  async generatePrediction(data: {
    conditions: any;
    characteristics: any;
    players: any;
  }) {
    try {
      const rendomModel = AIModels[getRandomIndex(AIModels.length)];
      const response = await client.chat.completions.create({
        messages: [
          {
            role: 'system',
            content: sysContext,
          },
          {
            role: 'user',
            content: genUserContext(data),
          },
        ],
        model: rendomModel,
        top_p: 0.25,
        temperature: 1.5,
        max_tokens: 2048,
      });
      const output = response.choices[0].message.content;
      // model subscription
      const modelSub = `\nModel: ${rendomModel}`;
      const result = output + modelSub;
      return result;
    } catch (e) {
      console.log(e);
      return 'No data';
    }
  }
}
