datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

model users {
  id          String    @id @default(uuid())
  email       String    @unique
  password    String?
  displayName String?
  avatar      String?
  coins       Int       @default(0)
}

model payments {
  id              String    @id @default(uuid())
  userId          String
  externalId      String
  productId       String
  payment_system  String
  data            String
  status          String
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "payments")
}

model userProducts {
  id                String   @id @default(uuid())
  userId            String
  productId         String
  status            String
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "user_products")
}

model session {
  id        String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  sid       String
  sess      Json
  expire    DateTime
  createdAt DateTime    @default(now()) @db.Timestamp(6)
  updatedAt DateTime?   @updatedAt @db.Timestamp(6)

  @@unique([sid])
}

model files {
  id        String   @id @default(uuid())
  userId    String
  filename  String?
  size      Int      @default(0)
  mime      String?
  type      String?
  metadata  String?
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "files")
}

model notifications {
  id          String   @id @default(uuid())
  senderId    String
  recipientId String
  type        String?
  data        String
  seen        Boolean  @default(false)
  createdAt   DateTime @default(now()) @map(name: "created_at")
  updatedAt   DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "notifications")
}

model lobbies {
  id              String   @id @default(uuid())
  organizatorId   String
  key             String
  settings        String
  createdAt       DateTime @default(now()) @map(name: "created_at")
  updatedAt       DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "lobbies")
}

model lobbyContestants {
  id                String   @id @default(uuid())
  userId            String
  lobbyId           String
  characteristics   String
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "lobby_contestants")
}

model chatMessages {
  id          String   @id @default(uuid())
  userId      String
  lobbyId     String
  text        String
  mentionId   String?
  replyTo     String?
  createdAt   DateTime @default(now()) @map(name: "created_at")
  updatedAt   DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "chat_messages")
}

model activityLogs {
  id          String   @id @default(uuid())
  userId      String
  lobbyId     String
  action      String
  payload     String   
  createdAt   DateTime @default(now()) @map(name: "created_at")
  updatedAt   DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "activity_logs")
}
