from fastapi import FastAPI, File, UploadFile, HTTPException
from fastapi.responses import StreamingResponse

from io import BytesIO
from PIL import Image

import utils.background as background

import numpy as np

app = FastAPI()



@app.post("/update-background/")
async def update_background(file: UploadFile = File(...)):
    try:
        # Read the uploaded image file
        contents = await file.read()
        img = Image.open(BytesIO(contents)).convert('RGB')
        
        # Process image
        processed_img = background.process(img)
        processed_img = Image.fromarray(processed_img)

        # Save the backgrounded image to a byte stream
        output = BytesIO()
        processed_img.save(output, format="JPEG")
        output.seek(0)
        
        # Return the backgrounded image as a response
        return StreamingResponse(output, media_type="image/jpeg")
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))



# @app.get(
#     "/image",

#     # Set what the media type will be in the autogenerated OpenAPI specification.
#     # fastapi.tiangolo.com/advanced/additional-responses/#additional-media-types-for-the-main-response
#     responses = {
#         200: {
#             "content": {"image/png": {}}
#         }
#     },

#     # Prevent FastAPI from adding "application/json" as an additional
#     # response media type in the autogenerated OpenAPI specification.
#     # https://github.com/tiangolo/fastapi/issues/3258
#     response_class=Response
# )
# def get_image()
#     image_bytes: bytes = generate_cat_picture()
#     # media_type here sets the media type of the actual response sent to the client.
#     return Response(content=image_bytes, media_type="image/png")